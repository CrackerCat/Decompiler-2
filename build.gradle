plugins {
    id "java"
    id "org.jetbrains.kotlin.jvm" version "1.7.10"
    id "io.freefair.lombok" version "6.5.1"
    id "org.openjfx.javafxplugin" version "0.0.13"
    id "org.panteleyev.jpackageplugin" version "1.3.1"
}

group = "dev.shota"
version = "1.0.0"

repositories {
    mavenCentral()
    maven { url "https://maven.quiltmc.org/repository/release/" }
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

javafx {
    version = JavaVersion.VERSION_18
    modules "javafx.base", "javafx.controls", "javafx.graphics", "javafx.swing"
}

dependencies {
    implementation group: "org.jetbrains", name: "annotations", version: "23.0.0"
    implementation group: "org.slf4j", name: "slf4j-simple", version: "2.0.0"
    implementation group: "com.fasterxml.jackson.core", name: "jackson-core", version: "2.13.3"
    implementation group: "com.fasterxml.jackson.core", name: "jackson-databind", version: "2.13.3"
    implementation group: "org.reflections", name: "reflections", version: "0.10.2"
    implementation group: "org.ow2.asm", name: "asm", version: "9.3"
    implementation group: "org.ow2.asm", name: "asm-tree", version: "9.3"
    implementation group: "org.ow2.asm", name: "asm-util", version: "9.3"
    implementation group: "org.quiltmc", name: "quiltflower", version: "1.8.1"
    implementation group: "com.formdev", name: "flatlaf", version: "2.4"
    implementation group: "org.controlsfx", name: "controlsfx", version: "11.1.1"
    implementation group: "org.fxmisc.richtext", name: "richtextfx", version: "0.10.9"
    implementation group: "org.openjfx", name: "javafx-base", version: "${javafx.version}:win"
    implementation group: "org.openjfx", name: "javafx-base", version: "${javafx.version}:mac-aarch64"
    implementation group: "org.openjfx", name: "javafx-base", version: "${javafx.version}:linux"
    implementation group: "org.openjfx", name: "javafx-controls", version: "${javafx.version}:win"
    implementation group: "org.openjfx", name: "javafx-controls", version: "${javafx.version}:mac-aarch64"
    implementation group: "org.openjfx", name: "javafx-controls", version: "${javafx.version}:linux"
    implementation group: "org.openjfx", name: "javafx-graphics", version: "${javafx.version}:win"
    implementation group: "org.openjfx", name: "javafx-graphics", version: "${javafx.version}:mac-aarch64"
    implementation group: "org.openjfx", name: "javafx-graphics", version: "${javafx.version}:linux"
    implementation group: "org.openjfx", name: "javafx-swing", version: "${javafx.version}:win"
    implementation group: "org.openjfx", name: "javafx-swing", version: "${javafx.version}:mac-aarch64"
    implementation group: "org.openjfx", name: "javafx-swing", version: "${javafx.version}:linux"
}

tasks {
    compileKotlin {
        kotlinOptions {
            jvmTarget = JavaVersion.VERSION_17.toString()
        }
    }

    processResources {
        filesMatching("application.properties") {
            expand project.properties
        }
    }

    jar {
        archiveBaseName.set(project.name.toLowerCase())
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        manifest.attributes["Main-Class"] = "${project.group}.${project.name.toLowerCase()}.Main"
        manifest.attributes["Agent-Class"] = "${project.group}.${project.name.toLowerCase()}.Agent"
        from { configurations.compileClasspath.filter{ it.exists() }.collect { it.isDirectory() ? it : zipTree(it) } }
    }

    jpackage {
        appName = rootProject.name
        copyright = "Copyright 2022 shota"
        appDescription = "Java Decompiler Gui"
        vendor = "shota"
        input = jar.getDestinationDirectory().asFile.get().path
        mainJar = jar.archiveFileName.get()
        destination = "${buildDir.path}/jpackage"
        licenseFile = "${sourceSets["main"].resources.srcDirs.first().path}/license.txt"

        windows {
            icon = "${sourceSets["main"].resources.srcDirs.first().path}/logo/logo.ico"
            winMenu = true
            winDirChooser = true
            winUpgradeUuid = "880be177-032d-496e-8d92-cefa555b2c88"
            winMenuGroup = "shota"
            winShortcut = true
            winPerUserInstall = true
        }

        mac {
            icon = "${sourceSets["main"].resources.srcDirs.first().path}/logo/logo.icns"
            macPackageIdentifier = "${project.group}.${project.name}"
        }
    }

    task testJar(type: Jar, dependsOn: testClasses) {
        archiveFileName.set("test.jar")
        manifest.attributes["Main-Class"] = "${project.group}.${project.name.toLowerCase()}.Main"
        from sourceSets.test.output
    }
}